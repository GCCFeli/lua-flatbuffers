-- automatically generated by the FlatBuffers compiler, do not modify

local flatbuffers = require('flatbuffers')

local ____exports = {}

local fixed32 = math.fixed32
local value32 = math.value32

local fixed64 = math.fixed64
local value64 = math.value64

-- namespace: Protocol

____exports.NestedStruct = {}
local NestedStruct = ____exports.NestedStruct -- the module
local NestedStruct_mt = {} -- the class metatable

function NestedStruct.New()
    local o = {}
    setmetatable(o, {__index = NestedStruct_mt})
    return o
end
function NestedStruct_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function NestedStruct_mt:NestedStructField()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 0))
end
function NestedStruct.CreateNestedStruct(builder, nestedStructField)
    builder:Prep(8, 8)
    builder:PrependInt64(value64(nestedStructField))
    return builder:Offset()
end

function NestedStruct.Pack(builder, _o)
    return NestedStruct.CreateNestedStruct(builder, _o.nestedStructField)
end

function NestedStruct_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.Test_generated").NestedStructT)
    self:UnPackTo(_o)
    return _o
end

function NestedStruct_mt:UnPackTo(_o)
    _o.nestedStructField = self:NestedStructField()
    return _o
end


____exports.SomeStruct = {}
local SomeStruct = ____exports.SomeStruct -- the module
local SomeStruct_mt = {} -- the class metatable

function SomeStruct.New()
    local o = {}
    setmetatable(o, {__index = SomeStruct_mt})
    return o
end
function SomeStruct_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function SomeStruct_mt:SomeField()
    return self.view:Get(flatbuffers.N.Int32, self.view.pos + 0)
end
function SomeStruct_mt:NestedStruct(obj)
    obj:Init(self.view.bytes, self.view.pos + 8)
    return obj
end
function SomeStruct.CreateSomeStruct(builder, someField, nestedStruct_nestedStructField)
    builder:Prep(8, 16)
    builder:Prep(8, 8)
    builder:PrependInt64(value64(nestedStruct_nestedStructField))
    builder:Pad(4)
    builder:PrependInt32(someField)
    return builder:Offset()
end

function SomeStruct.Pack(builder, _o)
    return SomeStruct.CreateSomeStruct(builder, _o.someField, _o.nestedStruct.nestedStructField)
end

function SomeStruct_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.Test_generated").SomeStructT)
    self:UnPackTo(_o)
    return _o
end

function SomeStruct_mt:UnPackTo(_o)
    _o.someField = self:SomeField()
    local _nestedStruct = self:NestedStruct(____exports.NestedStruct.New())
    _o.nestedStruct = _nestedStruct:UnPack()
    return _o
end


-- /// some comment
____exports.TestData = {}
local TestData = ____exports.TestData -- the module
local TestData_mt = {} -- the class metatable

function TestData.New()
    local o = {}
    setmetatable(o, {__index = TestData_mt})
    return o
end
function TestData.GetRootAsTestData(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TestData.New()
    o:Init(buf, n + offset)
    return o
end
function TestData_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
-- /// entity
function TestData_mt:Entity()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return -1
end
function TestData_mt:TeamEntity()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function TestData_mt:HasBall()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestData_mt:LastHasBall()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestData_mt:Index()
    local o = self.view:Offset(12)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function TestData_mt:CharacterId()
    local o = self.view:Offset(14)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function TestData_mt:RoleId()
    local o = self.view:Offset(16)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function TestData_mt:IsAtDefenseTargetPosition()
    local o = self.view:Offset(18)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestData_mt:MarkedByAthleteId()
    local o = self.view:Offset(20)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function TestData_mt:SomeLong()
    local o = self.view:Offset(22)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int64, o + self.view.pos)
    end
    return 0
end
function TestData_mt:SomeFix64()
    local o = self.view:Offset(24)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return 0
end
function TestData_mt:SomeStruct()
    local o = self.view:Offset(26)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = ____exports.SomeStruct.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeArray(j)
    local o = self.view:Offset(28)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 16)
        local obj = ____exports.SomeStruct.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeArrayLength()
    local o = self.view:Offset(28)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:SomeVector2()
    local o = self.view:Offset(30)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = require("protocol.generated.Native_serializer").Vector2Fix64.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeObj()
    local o = self.view:Offset(32)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.SomethingElse.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeOtherArray(j)
    local o = self.view:Offset(34)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = ____exports.SomethingElse.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeOtherArrayLength()
    local o = self.view:Offset(34)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:SomeEmptyObj()
    local o = self.view:Offset(36)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.SomethingElse.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeNumberArray(j)
    local o = self.view:Offset(38)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return fixed64(self.view:Get(flatbuffers.N.Int64, a + ((j-1) * 8)))
    end
    return 0
end
function TestData_mt:SomeNumberArrayLength()
    local o = self.view:Offset(38)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:SomeVector2Array(j)
    local o = self.view:Offset(40)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 16)
        local obj = require("protocol.generated.Native_serializer").Vector2Fix64.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:SomeVector2ArrayLength()
    local o = self.view:Offset(40)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:OptionalNumber()
    local o = self.view:Offset(42)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return nil
end
function TestData_mt:OptionalNumber1()
    local o = self.view:Offset(44)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return nil
end
function TestData_mt:OptionalNumber2()
    local o = self.view:Offset(46)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return nil
end
function TestData_mt:OptionalStruct()
    local o = self.view:Offset(48)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = ____exports.SomeStruct.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:OptionalStruct1()
    local o = self.view:Offset(50)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = ____exports.SomeStruct.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:IntArray(j)
    local o = self.view:Offset(52)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function TestData_mt:IntArrayLength()
    local o = self.view:Offset(52)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:Str()
    local o = self.view:Offset(54)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function TestData_mt:ArrayOfArray(j)
    local o = self.view:Offset(56)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = ____exports.TableWithArray.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function TestData_mt:ArrayOfArrayLength()
    local o = self.view:Offset(56)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TestData_mt:Bool1()
    local o = self.view:Offset(58)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestData_mt:Bool2()
    local o = self.view:Offset(60)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return true
end
function TestData_mt:Bool3()
    local o = self.view:Offset(62)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestData_mt:Bool4()
    local o = self.view:Offset(64)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return true
end
function TestData_mt:OptionalInt()
    local o = self.view:Offset(66)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return nil
end
function TestData_mt:OptionalInt1()
    local o = self.view:Offset(68)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return nil
end
function TestData_mt:OptionalInt2()
    local o = self.view:Offset(70)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return nil
end
function TestData_mt:OptionalBool()
    local o = self.view:Offset(72)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return nil
end
function TestData_mt:OptionalBool1()
    local o = self.view:Offset(74)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return nil
end
function TestData_mt:OptionalBool2()
    local o = self.view:Offset(76)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return nil
end
function TestData.Start(builder) builder:StartObject(37) end
function TestData.AddEntity(builder, entity) builder:PrependInt32Slot(0, entity, -1) end
function TestData.AddTeamEntity(builder, teamEntity) builder:PrependInt32Slot(1, teamEntity, 0) end
function TestData.AddHasBall(builder, hasBall) builder:PrependBoolSlot(2, hasBall, 0) end
function TestData.AddLastHasBall(builder, lastHasBall) builder:PrependBoolSlot(3, lastHasBall, 0) end
function TestData.AddIndex(builder, index) builder:PrependInt32Slot(4, index, 0) end
function TestData.AddCharacterId(builder, characterId) builder:PrependInt16Slot(5, characterId, 0) end
function TestData.AddRoleId(builder, roleId) builder:PrependInt16Slot(6, roleId, 0) end
function TestData.AddIsAtDefenseTargetPosition(builder, isAtDefenseTargetPosition) builder:PrependBoolSlot(7, isAtDefenseTargetPosition, 0) end
function TestData.AddMarkedByAthleteId(builder, markedByAthleteId) builder:PrependInt32Slot(8, markedByAthleteId, 0) end
function TestData.AddSomeLong(builder, someLong) builder:PrependInt64Slot(9, someLong, 0) end
function TestData.AddSomeFix64(builder, someFix64) builder:PrependInt64Slot(10, value64(someFix64), (0 --[[ 0 ]])) end
function TestData.AddSomeStruct(builder, someStruct) builder:PrependStructSlot(11, someStruct, 0) end
function TestData.AddSomeArray(builder, someArray) builder:PrependUOffsetTRelativeSlot(12, someArray, 0) end
function TestData.StartSomeArrayVector(builder, numElems) return builder:StartVector(16, numElems, 8) end
function TestData.AddSomeVector2(builder, someVector2) builder:PrependStructSlot(13, someVector2, 0) end
function TestData.AddSomeObj(builder, someObj) builder:PrependUOffsetTRelativeSlot(14, someObj, 0) end
function TestData.AddSomeOtherArray(builder, someOtherArray) builder:PrependUOffsetTRelativeSlot(15, someOtherArray, 0) end
function TestData.StartSomeOtherArrayVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TestData.AddSomeEmptyObj(builder, someEmptyObj) builder:PrependUOffsetTRelativeSlot(16, someEmptyObj, 0) end
function TestData.AddSomeNumberArray(builder, someNumberArray) builder:PrependUOffsetTRelativeSlot(17, someNumberArray, 0) end
function TestData.StartSomeNumberArrayVector(builder, numElems) return builder:StartVector(8, numElems, 8) end
function TestData.AddSomeVector2Array(builder, someVector2Array) builder:PrependUOffsetTRelativeSlot(18, someVector2Array, 0) end
function TestData.StartSomeVector2ArrayVector(builder, numElems) return builder:StartVector(16, numElems, 8) end
function TestData.AddOptionalNumber(builder, optionalNumber) if optionalNumber ~= nil then builder:PrependInt64Slot(19, value64(optionalNumber), nil) end end
function TestData.AddOptionalNumber1(builder, optionalNumber1) if optionalNumber1 ~= nil then builder:PrependInt64Slot(20, value64(optionalNumber1), nil) end end
function TestData.AddOptionalNumber2(builder, optionalNumber2) if optionalNumber2 ~= nil then builder:PrependInt64Slot(21, value64(optionalNumber2), nil) end end
function TestData.AddOptionalStruct(builder, optionalStruct) builder:PrependStructSlot(22, optionalStruct, 0) end
function TestData.AddOptionalStruct1(builder, optionalStruct1) builder:PrependStructSlot(23, optionalStruct1, 0) end
function TestData.AddIntArray(builder, intArray) builder:PrependUOffsetTRelativeSlot(24, intArray, 0) end
function TestData.StartIntArrayVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TestData.AddStr(builder, str) builder:PrependUOffsetTRelativeSlot(25, str, 0) end
function TestData.AddArrayOfArray(builder, arrayOfArray) builder:PrependUOffsetTRelativeSlot(26, arrayOfArray, 0) end
function TestData.StartArrayOfArrayVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TestData.AddBool1(builder, bool1) builder:PrependBoolSlot(27, bool1, 0) end
function TestData.AddBool2(builder, bool2) builder:PrependBoolSlot(28, bool2, 1) end
function TestData.AddBool3(builder, bool3) builder:PrependBoolSlot(29, bool3, 0) end
function TestData.AddBool4(builder, bool4) builder:PrependBoolSlot(30, bool4, 1) end
function TestData.AddOptionalInt(builder, optionalInt) if optionalInt ~= nil then builder:PrependInt32Slot(31, optionalInt, nil) end end
function TestData.AddOptionalInt1(builder, optionalInt1) if optionalInt1 ~= nil then builder:PrependInt32Slot(32, optionalInt1, nil) end end
function TestData.AddOptionalInt2(builder, optionalInt2) if optionalInt2 ~= nil then builder:PrependInt32Slot(33, optionalInt2, nil) end end
function TestData.AddOptionalBool(builder, optionalBool) if optionalBool ~= nil then builder:PrependBoolSlot(34, optionalBool, nil) end end
function TestData.AddOptionalBool1(builder, optionalBool1) if optionalBool1 ~= nil then builder:PrependBoolSlot(35, optionalBool1, nil) end end
function TestData.AddOptionalBool2(builder, optionalBool2) if optionalBool2 ~= nil then builder:PrependBoolSlot(36, optionalBool2, nil) end end
function TestData.End(builder) return builder:EndObject() end

function TestData.Pack(builder, _o)
    local _entity = _o.entity
    local _teamEntity = _o.teamEntity
    local _hasBall = _o.hasBall
    local _lastHasBall = _o.lastHasBall
    local _index = _o.index
    local _characterId = _o.characterId
    local _roleId = _o.roleId
    local _isAtDefenseTargetPosition = _o.isAtDefenseTargetPosition
    local _markedByAthleteId = _o.markedByAthleteId
    local _someLong = _o.someLong
    local _someFix64 = _o.someFix64
    local _someArray = 0
    local _someArrayLength = #_o.someArray
    if _someArrayLength > 0 then
        TestData.StartSomeArrayVector(builder, _someArrayLength)
        for i = _someArrayLength, 1, -1 do
            ____exports.SomeStruct.Pack(builder, _o.someArray[i])
        end
        _someArray = builder:EndVector(_someArrayLength)
    end
    local _someObj = _o.someObj and ____exports.SomethingElse.Pack(builder, _o.someObj) or 0
    local _someOtherArray = 0
    local _someOtherArrayLength = #_o.someOtherArray
    if _someOtherArrayLength > 0 then
        local __elems = {}
        for i = 1, _someOtherArrayLength do
            __elems[i] = ____exports.SomethingElse.Pack(builder, _o.someOtherArray[i])
        end
        TestData.StartSomeOtherArrayVector(builder, _someOtherArrayLength)
        for i = _someOtherArrayLength, 1, -1 do
            builder:PrependUOffsetTRelative(__elems[i])
        end
        _someOtherArray = builder:EndVector(_someOtherArrayLength)
    end
    local _someEmptyObj = _o.someEmptyObj and ____exports.SomethingElse.Pack(builder, _o.someEmptyObj) or 0
    local _someNumberArray = 0
    local _someNumberArrayLength = #_o.someNumberArray
    if _someNumberArrayLength > 0 then
        TestData.StartSomeNumberArrayVector(builder, _someNumberArrayLength)
        for i = _someNumberArrayLength, 1, -1 do
            builder:PrependInt64(value64(_o.someNumberArray[i]))
        end
        _someNumberArray = builder:EndVector(_someNumberArrayLength)
    end
    local _someVector2Array = 0
    local _someVector2ArrayLength = #_o.someVector2Array
    if _someVector2ArrayLength > 0 then
        TestData.StartSomeVector2ArrayVector(builder, _someVector2ArrayLength)
        for i = _someVector2ArrayLength, 1, -1 do
            require("protocol.generated.Native_serializer").Vector2Fix64.Pack(builder, _o.someVector2Array[i])
        end
        _someVector2Array = builder:EndVector(_someVector2ArrayLength)
    end
    local _optionalNumber = _o.optionalNumber
    local _optionalNumber1 = _o.optionalNumber1
    local _optionalNumber2 = _o.optionalNumber2
    local _intArray = 0
    local _intArrayLength = #_o.intArray
    if _intArrayLength > 0 then
        TestData.StartIntArrayVector(builder, _intArrayLength)
        for i = _intArrayLength, 1, -1 do
            builder:PrependInt32(_o.intArray[i])
        end
        _intArray = builder:EndVector(_intArrayLength)
    end
    local _str = string.len(_o.str) > 0 and builder:CreateString(_o.str) or 0
    local _arrayOfArray = 0
    local _arrayOfArrayLength = #_o.arrayOfArray
    if _arrayOfArrayLength > 0 then
        local __elems = {}
        for i = 1, _arrayOfArrayLength do
            __elems[i] = ____exports.TableWithArray.Pack(builder, _o.arrayOfArray[i])
        end
        TestData.StartArrayOfArrayVector(builder, _arrayOfArrayLength)
        for i = _arrayOfArrayLength, 1, -1 do
            builder:PrependUOffsetTRelative(__elems[i])
        end
        _arrayOfArray = builder:EndVector(_arrayOfArrayLength)
    end
    local _bool1 = _o.bool1
    local _bool2 = _o.bool2
    local _bool3 = _o.bool3
    local _bool4 = _o.bool4
    local _optionalInt = _o.optionalInt
    local _optionalInt1 = _o.optionalInt1
    local _optionalInt2 = _o.optionalInt2
    local _optionalBool = _o.optionalBool
    local _optionalBool1 = _o.optionalBool1
    local _optionalBool2 = _o.optionalBool2

    TestData.Start(builder)
    TestData.AddOptionalBool2(builder, _optionalBool2)
    TestData.AddOptionalBool1(builder, _optionalBool1)
    TestData.AddOptionalBool(builder, _optionalBool)
    TestData.AddOptionalInt2(builder, _optionalInt2)
    TestData.AddOptionalInt1(builder, _optionalInt1)
    TestData.AddOptionalInt(builder, _optionalInt)
    TestData.AddBool4(builder, _bool4)
    TestData.AddBool3(builder, _bool3)
    TestData.AddBool2(builder, _bool2)
    TestData.AddBool1(builder, _bool1)
    TestData.AddArrayOfArray(builder, _arrayOfArray)
    TestData.AddStr(builder, _str)
    TestData.AddIntArray(builder, _intArray)
    local _optionalStruct1 = _o.optionalStruct1 and ____exports.SomeStruct.Pack(builder, _o.optionalStruct1) or 0
    TestData.AddOptionalStruct1(builder, _optionalStruct1)
    local _optionalStruct = _o.optionalStruct and ____exports.SomeStruct.Pack(builder, _o.optionalStruct) or 0
    TestData.AddOptionalStruct(builder, _optionalStruct)
    TestData.AddOptionalNumber2(builder, _optionalNumber2)
    TestData.AddOptionalNumber1(builder, _optionalNumber1)
    TestData.AddOptionalNumber(builder, _optionalNumber)
    TestData.AddSomeVector2Array(builder, _someVector2Array)
    TestData.AddSomeNumberArray(builder, _someNumberArray)
    TestData.AddSomeEmptyObj(builder, _someEmptyObj)
    TestData.AddSomeOtherArray(builder, _someOtherArray)
    TestData.AddSomeObj(builder, _someObj)
    local _someVector2 = require("protocol.generated.Native_serializer").Vector2Fix64.Pack(builder, _o.someVector2)
    TestData.AddSomeVector2(builder, _someVector2)
    TestData.AddSomeArray(builder, _someArray)
    local _someStruct = ____exports.SomeStruct.Pack(builder, _o.someStruct)
    TestData.AddSomeStruct(builder, _someStruct)
    TestData.AddSomeFix64(builder, _someFix64)
    TestData.AddSomeLong(builder, _someLong)
    TestData.AddMarkedByAthleteId(builder, _markedByAthleteId)
    TestData.AddIsAtDefenseTargetPosition(builder, _isAtDefenseTargetPosition)
    TestData.AddRoleId(builder, _roleId)
    TestData.AddCharacterId(builder, _characterId)
    TestData.AddIndex(builder, _index)
    TestData.AddLastHasBall(builder, _lastHasBall)
    TestData.AddHasBall(builder, _hasBall)
    TestData.AddTeamEntity(builder, _teamEntity)
    TestData.AddEntity(builder, _entity)
    return TestData.End(builder)
end

function TestData_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.Test_generated").TestDataT)
    self:UnPackTo(_o)
    return _o
end

function TestData_mt:UnPackTo(_o)
    _o.entity = self:Entity()
    _o.teamEntity = self:TeamEntity()
    _o.hasBall = self:HasBall()
    _o.lastHasBall = self:LastHasBall()
    _o.index = self:Index()
    _o.characterId = self:CharacterId()
    _o.roleId = self:RoleId()
    _o.isAtDefenseTargetPosition = self:IsAtDefenseTargetPosition()
    _o.markedByAthleteId = self:MarkedByAthleteId()
    _o.someLong = self:SomeLong()
    _o.someFix64 = self:SomeFix64()
    local _someStruct = self:SomeStruct()
    _o.someStruct = _someStruct:UnPack()
    _o.someArray = {}
    for i = 1, self:SomeArrayLength() do
        _o.someArray[i] = self:SomeArray(i):UnPack()
    end
    local _someVector2 = self:SomeVector2()
    _o.someVector2 = _someVector2:UnPack()
    local _someObj = self:SomeObj()
    if _someObj then
        _o.someObj = _someObj:UnPack()
    else
        _o.someObj = nil
    end
    _o.someOtherArray = {}
    for i = 1, self:SomeOtherArrayLength() do
        _o.someOtherArray[i] = self:SomeOtherArray(i):UnPack()
    end
    local _someEmptyObj = self:SomeEmptyObj()
    if _someEmptyObj then
        _o.someEmptyObj = _someEmptyObj:UnPack()
    else
        _o.someEmptyObj = nil
    end
    _o.someNumberArray = {}
    for i = 1, self:SomeNumberArrayLength() do
        _o.someNumberArray[i] = self:SomeNumberArray(i)
    end
    _o.someVector2Array = {}
    for i = 1, self:SomeVector2ArrayLength() do
        _o.someVector2Array[i] = self:SomeVector2Array(i):UnPack()
    end
    _o.optionalNumber = self:OptionalNumber()
    _o.optionalNumber1 = self:OptionalNumber1()
    _o.optionalNumber2 = self:OptionalNumber2()
    local _optionalStruct = self:OptionalStruct()
    if _optionalStruct then
        _o.optionalStruct = _optionalStruct:UnPack()
    else
        _o.optionalStruct = nil
    end
    local _optionalStruct1 = self:OptionalStruct1()
    if _optionalStruct1 then
        _o.optionalStruct1 = _optionalStruct1:UnPack()
    else
        _o.optionalStruct1 = nil
    end
    _o.intArray = {}
    for i = 1, self:IntArrayLength() do
        _o.intArray[i] = self:IntArray(i)
    end
    _o.str = self:Str()
    _o.arrayOfArray = {}
    for i = 1, self:ArrayOfArrayLength() do
        _o.arrayOfArray[i] = self:ArrayOfArray(i):UnPack()
    end
    _o.bool1 = self:Bool1()
    _o.bool2 = self:Bool2()
    _o.bool3 = self:Bool3()
    _o.bool4 = self:Bool4()
    _o.optionalInt = self:OptionalInt()
    _o.optionalInt1 = self:OptionalInt1()
    _o.optionalInt2 = self:OptionalInt2()
    _o.optionalBool = self:OptionalBool()
    _o.optionalBool1 = self:OptionalBool1()
    _o.optionalBool2 = self:OptionalBool2()
    return _o
end


-- /// SomethingElse SomethingElse
____exports.SomethingElse = {}
local SomethingElse = ____exports.SomethingElse -- the module
local SomethingElse_mt = {} -- the class metatable

function SomethingElse.New()
    local o = {}
    setmetatable(o, {__index = SomethingElse_mt})
    return o
end
function SomethingElse.GetRootAsSomethingElse(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = SomethingElse.New()
    o:Init(buf, n + offset)
    return o
end
function SomethingElse_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function SomethingElse_mt:SomeField()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function SomethingElse.Start(builder) builder:StartObject(1) end
function SomethingElse.AddSomeField(builder, someField) builder:PrependInt32Slot(0, someField, 0) end
function SomethingElse.End(builder) return builder:EndObject() end

function SomethingElse.Pack(builder, _o)
    local _someField = _o.someField

    SomethingElse.Start(builder)
    SomethingElse.AddSomeField(builder, _someField)
    return SomethingElse.End(builder)
end

function SomethingElse_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.Test_generated").SomethingElseT)
    self:UnPackTo(_o)
    return _o
end

function SomethingElse_mt:UnPackTo(_o)
    _o.someField = self:SomeField()
    return _o
end


____exports.TableWithArray = {}
local TableWithArray = ____exports.TableWithArray -- the module
local TableWithArray_mt = {} -- the class metatable

function TableWithArray.New()
    local o = {}
    setmetatable(o, {__index = TableWithArray_mt})
    return o
end
function TableWithArray.GetRootAsTableWithArray(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TableWithArray.New()
    o:Init(buf, n + offset)
    return o
end
function TableWithArray_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function TableWithArray_mt:SomeArray(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int32, a + ((j-1) * 4))
    end
    return 0
end
function TableWithArray_mt:SomeArrayLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function TableWithArray.Start(builder) builder:StartObject(1) end
function TableWithArray.AddSomeArray(builder, someArray) builder:PrependUOffsetTRelativeSlot(0, someArray, 0) end
function TableWithArray.StartSomeArrayVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function TableWithArray.End(builder) return builder:EndObject() end

function TableWithArray.Pack(builder, _o)
    local _someArray = 0
    local _someArrayLength = #_o.someArray
    if _someArrayLength > 0 then
        TableWithArray.StartSomeArrayVector(builder, _someArrayLength)
        for i = _someArrayLength, 1, -1 do
            builder:PrependInt32(_o.someArray[i])
        end
        _someArray = builder:EndVector(_someArrayLength)
    end

    TableWithArray.Start(builder)
    TableWithArray.AddSomeArray(builder, _someArray)
    return TableWithArray.End(builder)
end

function TableWithArray_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.Test_generated").TableWithArrayT)
    self:UnPackTo(_o)
    return _o
end

function TableWithArray_mt:UnPackTo(_o)
    _o.someArray = {}
    for i = 1, self:SomeArrayLength() do
        _o.someArray[i] = self:SomeArray(i)
    end
    return _o
end


return ____exports