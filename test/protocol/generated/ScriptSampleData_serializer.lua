-- automatically generated by the FlatBuffers compiler, do not modify

local flatbuffers = require('flatbuffers')

local ____exports = {}

local fixed32 = math.fixed32
local value32 = math.value32

local fixed64 = math.fixed64
local value64 = math.value64

-- namespace: Protocol

____exports.ManualDribble = {}
local ManualDribble = ____exports.ManualDribble -- the module
local ManualDribble_mt = {} -- the class metatable

function ManualDribble.New()
    local o = {}
    setmetatable(o, {__index = ManualDribble_mt})
    return o
end
function ManualDribble.GetRootAsManualDribble(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = ManualDribble.New()
    o:Init(buf, n + offset)
    return o
end
function ManualDribble_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function ManualDribble_mt:Direction()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return 0
end
function ManualDribble.Start(builder) builder:StartObject(1) end
function ManualDribble.AddDirection(builder, direction) builder:PrependInt64Slot(0, value64(direction), (0 --[[ 0 ]])) end
function ManualDribble.End(builder) return builder:EndObject() end

function ManualDribble.Pack(builder, _o)
    local _direction = _o.direction

    ManualDribble.Start(builder)
    ManualDribble.AddDirection(builder, _direction)
    return ManualDribble.End(builder)
end

function ManualDribble_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").ManualDribbleT)
    self:UnPackTo(_o)
    return _o
end

function ManualDribble_mt:UnPackTo(_o)
    _o.direction = self:Direction()
    return _o
end


____exports.HeroMomentAction = {}
local HeroMomentAction = ____exports.HeroMomentAction -- the module
local HeroMomentAction_mt = {} -- the class metatable

function HeroMomentAction.New()
    local o = {}
    setmetatable(o, {__index = HeroMomentAction_mt})
    return o
end
function HeroMomentAction.GetRootAsHeroMomentAction(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = HeroMomentAction.New()
    o:Init(buf, n + offset)
    return o
end
function HeroMomentAction_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function HeroMomentAction_mt:Type()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function HeroMomentAction_mt:TriggerEvent()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function HeroMomentAction_mt:Dribble()
    local o = self.view:Offset(8)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.ManualDribble.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function HeroMomentAction.Start(builder) builder:StartObject(3) end
function HeroMomentAction.AddType(builder, type) builder:PrependInt16Slot(0, type, 0) end
function HeroMomentAction.AddTriggerEvent(builder, triggerEvent) builder:PrependInt16Slot(1, triggerEvent, 0) end
function HeroMomentAction.AddDribble(builder, dribble) builder:PrependUOffsetTRelativeSlot(2, dribble, 0) end
function HeroMomentAction.End(builder) return builder:EndObject() end

function HeroMomentAction.Pack(builder, _o)
    local _type = _o.type
    local _triggerEvent = _o.triggerEvent
    local _dribble = _o.dribble and ____exports.ManualDribble.Pack(builder, _o.dribble) or 0

    HeroMomentAction.Start(builder)
    HeroMomentAction.AddDribble(builder, _dribble)
    HeroMomentAction.AddTriggerEvent(builder, _triggerEvent)
    HeroMomentAction.AddType(builder, _type)
    return HeroMomentAction.End(builder)
end

function HeroMomentAction_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").HeroMomentActionT)
    self:UnPackTo(_o)
    return _o
end

function HeroMomentAction_mt:UnPackTo(_o)
    _o.type = self:Type()
    _o.triggerEvent = self:TriggerEvent()
    local _dribble = self:Dribble()
    if _dribble then
        _o.dribble = _dribble:UnPack()
    else
        _o.dribble = nil
    end
    return _o
end


____exports.Action = {}
local Action = ____exports.Action -- the module
local Action_mt = {} -- the class metatable

function Action.New()
    local o = {}
    setmetatable(o, {__index = Action_mt})
    return o
end
function Action.GetRootAsAction(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Action.New()
    o:Init(buf, n + offset)
    return o
end
function Action_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Action_mt:Type()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function Action_mt:HeroMomentAction()
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.HeroMomentAction.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Action.Start(builder) builder:StartObject(2) end
function Action.AddType(builder, type) builder:PrependInt16Slot(0, type, 0) end
function Action.AddHeroMomentAction(builder, heroMomentAction) builder:PrependUOffsetTRelativeSlot(1, heroMomentAction, 0) end
function Action.End(builder) return builder:EndObject() end

function Action.Pack(builder, _o)
    local _type = _o.type
    local _heroMomentAction = _o.heroMomentAction and ____exports.HeroMomentAction.Pack(builder, _o.heroMomentAction) or 0

    Action.Start(builder)
    Action.AddHeroMomentAction(builder, _heroMomentAction)
    Action.AddType(builder, _type)
    return Action.End(builder)
end

function Action_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").ActionT)
    self:UnPackTo(_o)
    return _o
end

function Action_mt:UnPackTo(_o)
    _o.type = self:Type()
    local _heroMomentAction = self:HeroMomentAction()
    if _heroMomentAction then
        _o.heroMomentAction = _heroMomentAction:UnPack()
    else
        _o.heroMomentAction = nil
    end
    return _o
end


____exports.AthleteSampleData = {}
local AthleteSampleData = ____exports.AthleteSampleData -- the module
local AthleteSampleData_mt = {} -- the class metatable

function AthleteSampleData.New()
    local o = {}
    setmetatable(o, {__index = AthleteSampleData_mt})
    return o
end
function AthleteSampleData.GetRootAsAthleteSampleData(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = AthleteSampleData.New()
    o:Init(buf, n + offset)
    return o
end
function AthleteSampleData_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function AthleteSampleData_mt:Action()
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.Action.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function AthleteSampleData.Start(builder) builder:StartObject(1) end
function AthleteSampleData.AddAction(builder, action) builder:PrependUOffsetTRelativeSlot(0, action, 0) end
function AthleteSampleData.End(builder) return builder:EndObject() end

function AthleteSampleData.Pack(builder, _o)
    local _action = _o.action and ____exports.Action.Pack(builder, _o.action) or 0

    AthleteSampleData.Start(builder)
    AthleteSampleData.AddAction(builder, _action)
    return AthleteSampleData.End(builder)
end

function AthleteSampleData_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").AthleteSampleDataT)
    self:UnPackTo(_o)
    return _o
end

function AthleteSampleData_mt:UnPackTo(_o)
    local _action = self:Action()
    if _action then
        _o.action = _action:UnPack()
    else
        _o.action = nil
    end
    return _o
end


____exports.TeamSampleData = {}
local TeamSampleData = ____exports.TeamSampleData -- the module
local TeamSampleData_mt = {} -- the class metatable

function TeamSampleData.New()
    local o = {}
    setmetatable(o, {__index = TeamSampleData_mt})
    return o
end
function TeamSampleData.GetRootAsTeamSampleData(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TeamSampleData.New()
    o:Init(buf, n + offset)
    return o
end
function TeamSampleData_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function TeamSampleData.Start(builder) builder:StartObject(0) end
function TeamSampleData.End(builder) return builder:EndObject() end

function TeamSampleData.Pack(builder, _o)

    TeamSampleData.Start(builder)
    return TeamSampleData.End(builder)
end

function TeamSampleData_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").TeamSampleDataT)
    self:UnPackTo(_o)
    return _o
end

function TeamSampleData_mt:UnPackTo(_o)
    return _o
end


____exports.MatchSampleData = {}
local MatchSampleData = ____exports.MatchSampleData -- the module
local MatchSampleData_mt = {} -- the class metatable

function MatchSampleData.New()
    local o = {}
    setmetatable(o, {__index = MatchSampleData_mt})
    return o
end
function MatchSampleData.GetRootAsMatchSampleData(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = MatchSampleData.New()
    o:Init(buf, n + offset)
    return o
end
function MatchSampleData_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function MatchSampleData_mt:WithBallAthleteId()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return -1
end
function MatchSampleData_mt:MatchMinutes()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return fixed64(self.view:Get(flatbuffers.N.Int64, o + self.view.pos))
    end
    return 0
end
function MatchSampleData_mt:MatchEvent()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 0
end
function MatchSampleData_mt:IsReset()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function MatchSampleData.Start(builder) builder:StartObject(4) end
function MatchSampleData.AddWithBallAthleteId(builder, withBallAthleteId) builder:PrependInt32Slot(0, withBallAthleteId, -1) end
function MatchSampleData.AddMatchMinutes(builder, matchMinutes) builder:PrependInt64Slot(1, value64(matchMinutes), (0 --[[ 0 ]])) end
function MatchSampleData.AddMatchEvent(builder, matchEvent) builder:PrependInt16Slot(2, matchEvent, 0) end
function MatchSampleData.AddIsReset(builder, isReset) builder:PrependBoolSlot(3, isReset, 0) end
function MatchSampleData.End(builder) return builder:EndObject() end

function MatchSampleData.Pack(builder, _o)
    local _withBallAthleteId = _o.withBallAthleteId
    local _matchMinutes = _o.matchMinutes
    local _matchEvent = _o.matchEvent
    local _isReset = _o.isReset

    MatchSampleData.Start(builder)
    MatchSampleData.AddIsReset(builder, _isReset)
    MatchSampleData.AddMatchEvent(builder, _matchEvent)
    MatchSampleData.AddMatchMinutes(builder, _matchMinutes)
    MatchSampleData.AddWithBallAthleteId(builder, _withBallAthleteId)
    return MatchSampleData.End(builder)
end

function MatchSampleData_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").MatchSampleDataT)
    self:UnPackTo(_o)
    return _o
end

function MatchSampleData_mt:UnPackTo(_o)
    _o.withBallAthleteId = self:WithBallAthleteId()
    _o.matchMinutes = self:MatchMinutes()
    _o.matchEvent = self:MatchEvent()
    _o.isReset = self:IsReset()
    return _o
end


____exports.ScriptSampleData = {}
local ScriptSampleData = ____exports.ScriptSampleData -- the module
local ScriptSampleData_mt = {} -- the class metatable

function ScriptSampleData.New()
    local o = {}
    setmetatable(o, {__index = ScriptSampleData_mt})
    return o
end
function ScriptSampleData.GetRootAsScriptSampleData(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = ScriptSampleData.New()
    o:Init(buf, n + offset)
    return o
end
function ScriptSampleData_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function ScriptSampleData_mt:Frame()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function ScriptSampleData_mt:Athletes(j)
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = ____exports.AthleteSampleData.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function ScriptSampleData_mt:AthletesLength()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function ScriptSampleData_mt:Teams(j)
    local o = self.view:Offset(8)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = ____exports.TeamSampleData.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function ScriptSampleData_mt:TeamsLength()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function ScriptSampleData_mt:Match()
    local o = self.view:Offset(10)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = ____exports.MatchSampleData.New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function ScriptSampleData.Start(builder) builder:StartObject(4) end
function ScriptSampleData.AddFrame(builder, frame) builder:PrependInt32Slot(0, frame, 0) end
function ScriptSampleData.AddAthletes(builder, athletes) builder:PrependUOffsetTRelativeSlot(1, athletes, 0) end
function ScriptSampleData.StartAthletesVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function ScriptSampleData.AddTeams(builder, teams) builder:PrependUOffsetTRelativeSlot(2, teams, 0) end
function ScriptSampleData.StartTeamsVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function ScriptSampleData.AddMatch(builder, match) builder:PrependUOffsetTRelativeSlot(3, match, 0) end
function ScriptSampleData.End(builder) return builder:EndObject() end

function ScriptSampleData.Pack(builder, _o)
    local _frame = _o.frame
    local _athletes = 0
    local _athletesLength = #_o.athletes
    if _athletesLength > 0 then
        local __elems = {}
        for i = 1, _athletesLength do
            __elems[i] = ____exports.AthleteSampleData.Pack(builder, _o.athletes[i])
        end
        ScriptSampleData.StartAthletesVector(builder, _athletesLength)
        for i = _athletesLength, 1, -1 do
            builder:PrependUOffsetTRelative(__elems[i])
        end
        _athletes = builder:EndVector(_athletesLength)
    end
    local _teams = 0
    local _teamsLength = #_o.teams
    if _teamsLength > 0 then
        local __elems = {}
        for i = 1, _teamsLength do
            __elems[i] = ____exports.TeamSampleData.Pack(builder, _o.teams[i])
        end
        ScriptSampleData.StartTeamsVector(builder, _teamsLength)
        for i = _teamsLength, 1, -1 do
            builder:PrependUOffsetTRelative(__elems[i])
        end
        _teams = builder:EndVector(_teamsLength)
    end
    local _match = _o.match and ____exports.MatchSampleData.Pack(builder, _o.match) or 0

    ScriptSampleData.Start(builder)
    ScriptSampleData.AddMatch(builder, _match)
    ScriptSampleData.AddTeams(builder, _teams)
    ScriptSampleData.AddAthletes(builder, _athletes)
    ScriptSampleData.AddFrame(builder, _frame)
    return ScriptSampleData.End(builder)
end

function ScriptSampleData_mt:UnPack()
    local _o = __TS__New(require("protocol.generated.ScriptSampleData_generated").ScriptSampleDataT)
    self:UnPackTo(_o)
    return _o
end

function ScriptSampleData_mt:UnPackTo(_o)
    _o.frame = self:Frame()
    _o.athletes = {}
    for i = 1, self:AthletesLength() do
        _o.athletes[i] = self:Athletes(i):UnPack()
    end
    _o.teams = {}
    for i = 1, self:TeamsLength() do
        _o.teams[i] = self:Teams(i):UnPack()
    end
    local _match = self:Match()
    _o.match = _match:UnPack()
    return _o
end


return ____exports