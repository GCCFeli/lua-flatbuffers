-- automatically generated by the FlatBuffers compiler, do not modify

local flatbuffers = require('flatbuffers')

local ____exports = {}

local fixed32 = math.fixed32
local value32 = math.value32

local fixed64 = math.fixed64
local value64 = math.value64

-- namespace: Protocol

____exports.Vector2Fix64 = {}
local Vector2Fix64 = ____exports.Vector2Fix64 -- the module
local Vector2Fix64_mt = {} -- the class metatable

function Vector2Fix64.New()
    local o = {}
    setmetatable(o, {__index = Vector2Fix64_mt})
    return o
end
function Vector2Fix64_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Vector2Fix64_mt:X()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 0))
end
function Vector2Fix64_mt:Y()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 8))
end
function Vector2Fix64.CreateVector2Fix64(builder, x, y)
    builder:Prep(8, 16)
    builder:PrependInt64(value64(y))
    builder:PrependInt64(value64(x))
    return builder:Offset()
end

function Vector2Fix64.Pack(builder, _o)
    return flatbuffers.Protocol.Vector2Fix64.Pack(builder, _o)
end

function Vector2Fix64_mt:UnPack()
    return flatbuffers.Protocol.Vector2Fix64.UnPack(self)
end


____exports.Vector3Fix64 = {}
local Vector3Fix64 = ____exports.Vector3Fix64 -- the module
local Vector3Fix64_mt = {} -- the class metatable

function Vector3Fix64.New()
    local o = {}
    setmetatable(o, {__index = Vector3Fix64_mt})
    return o
end
function Vector3Fix64_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Vector3Fix64_mt:X()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 0))
end
function Vector3Fix64_mt:Y()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 8))
end
function Vector3Fix64_mt:Z()
    return fixed64(self.view:Get(flatbuffers.N.Int64, self.view.pos + 16))
end
function Vector3Fix64.CreateVector3Fix64(builder, x, y, z)
    builder:Prep(8, 24)
    builder:PrependInt64(value64(z))
    builder:PrependInt64(value64(y))
    builder:PrependInt64(value64(x))
    return builder:Offset()
end

function Vector3Fix64.Pack(builder, _o)
    return flatbuffers.Protocol.Vector3Fix64.Pack(builder, _o)
end

function Vector3Fix64_mt:UnPack()
    return flatbuffers.Protocol.Vector3Fix64.UnPack(self)
end


return ____exports